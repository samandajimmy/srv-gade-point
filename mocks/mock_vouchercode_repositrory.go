// Code generated by MockGen. DO NOT EDIT.
// Source: gade/srv-gade-point/vouchercodes (interfaces: VcRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gade/srv-gade-point/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockVcRepository is a mock of VcRepository interface.
type MockVcRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVcRepositoryMockRecorder
}

// MockVcRepositoryMockRecorder is the mock recorder for MockVcRepository.
type MockVcRepositoryMockRecorder struct {
	mock *MockVcRepository
}

// NewMockVcRepository creates a new mock instance.
func NewMockVcRepository(ctrl *gomock.Controller) *MockVcRepository {
	mock := &MockVcRepository{ctrl: ctrl}
	mock.recorder = &MockVcRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVcRepository) EXPECT() *MockVcRepositoryMockRecorder {
	return m.recorder
}

// CountBoughtVoucherCode mocks base method.
func (m *MockVcRepository) CountBoughtVoucherCode(arg0 echo.Context, arg1 map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBoughtVoucherCode", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBoughtVoucherCode indicates an expected call of CountBoughtVoucherCode.
func (mr *MockVcRepositoryMockRecorder) CountBoughtVoucherCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBoughtVoucherCode", reflect.TypeOf((*MockVcRepository)(nil).CountBoughtVoucherCode), arg0, arg1)
}

// CountVoucherCode mocks base method.
func (m *MockVcRepository) CountVoucherCode(arg0 echo.Context, arg1 map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVoucherCode", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVoucherCode indicates an expected call of CountVoucherCode.
func (mr *MockVcRepositoryMockRecorder) CountVoucherCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVoucherCode", reflect.TypeOf((*MockVcRepository)(nil).CountVoucherCode), arg0, arg1)
}

// CountVoucherCodeByVoucherID mocks base method.
func (m *MockVcRepository) CountVoucherCodeByVoucherID(arg0 echo.Context, arg1 map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVoucherCodeByVoucherID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVoucherCodeByVoucherID indicates an expected call of CountVoucherCodeByVoucherID.
func (mr *MockVcRepositoryMockRecorder) CountVoucherCodeByVoucherID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVoucherCodeByVoucherID", reflect.TypeOf((*MockVcRepository)(nil).CountVoucherCodeByVoucherID), arg0, arg1)
}

// GetBoughtVoucherCode mocks base method.
func (m *MockVcRepository) GetBoughtVoucherCode(arg0 echo.Context, arg1 map[string]interface{}) ([]models.VoucherCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoughtVoucherCode", arg0, arg1)
	ret0, _ := ret[0].([]models.VoucherCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoughtVoucherCode indicates an expected call of GetBoughtVoucherCode.
func (mr *MockVcRepositoryMockRecorder) GetBoughtVoucherCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoughtVoucherCode", reflect.TypeOf((*MockVcRepository)(nil).GetBoughtVoucherCode), arg0, arg1)
}

// GetVoucherCodeHistory mocks base method.
func (m *MockVcRepository) GetVoucherCodeHistory(arg0 echo.Context, arg1 map[string]interface{}) ([]models.VoucherCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoucherCodeHistory", arg0, arg1)
	ret0, _ := ret[0].([]models.VoucherCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoucherCodeHistory indicates an expected call of GetVoucherCodeHistory.
func (mr *MockVcRepositoryMockRecorder) GetVoucherCodeHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoucherCodeHistory", reflect.TypeOf((*MockVcRepository)(nil).GetVoucherCodeHistory), arg0, arg1)
}

// GetVoucherCodeRefID mocks base method.
func (m *MockVcRepository) GetVoucherCodeRefID(arg0 echo.Context, arg1 string) (*models.VoucherCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoucherCodeRefID", arg0, arg1)
	ret0, _ := ret[0].(*models.VoucherCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoucherCodeRefID indicates an expected call of GetVoucherCodeRefID.
func (mr *MockVcRepositoryMockRecorder) GetVoucherCodeRefID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoucherCodeRefID", reflect.TypeOf((*MockVcRepository)(nil).GetVoucherCodeRefID), arg0, arg1)
}

// GetVoucherCodes mocks base method.
func (m *MockVcRepository) GetVoucherCodes(arg0 echo.Context, arg1 map[string]interface{}) ([]models.VoucherCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoucherCodes", arg0, arg1)
	ret0, _ := ret[0].([]models.VoucherCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoucherCodes indicates an expected call of GetVoucherCodes.
func (mr *MockVcRepositoryMockRecorder) GetVoucherCodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoucherCodes", reflect.TypeOf((*MockVcRepository)(nil).GetVoucherCodes), arg0, arg1)
}

// UpdateVoucherCodeInquired mocks base method.
func (m *MockVcRepository) UpdateVoucherCodeInquired(arg0 echo.Context, arg1 models.VoucherCode, arg2 models.PayloadValidator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoucherCodeInquired", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoucherCodeInquired indicates an expected call of UpdateVoucherCodeInquired.
func (mr *MockVcRepositoryMockRecorder) UpdateVoucherCodeInquired(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoucherCodeInquired", reflect.TypeOf((*MockVcRepository)(nil).UpdateVoucherCodeInquired), arg0, arg1, arg2)
}

// UpdateVoucherCodeRedeemed mocks base method.
func (m *MockVcRepository) UpdateVoucherCodeRedeemed(arg0 echo.Context, arg1, arg2, arg3 string) (*models.VoucherCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoucherCodeRedeemed", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.VoucherCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoucherCodeRedeemed indicates an expected call of UpdateVoucherCodeRedeemed.
func (mr *MockVcRepositoryMockRecorder) UpdateVoucherCodeRedeemed(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoucherCodeRedeemed", reflect.TypeOf((*MockVcRepository)(nil).UpdateVoucherCodeRedeemed), arg0, arg1, arg2, arg3)
}

// UpdateVoucherCodeRefID mocks base method.
func (m *MockVcRepository) UpdateVoucherCodeRefID(arg0 echo.Context, arg1 *models.VoucherCode, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoucherCodeRefID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoucherCodeRefID indicates an expected call of UpdateVoucherCodeRefID.
func (mr *MockVcRepositoryMockRecorder) UpdateVoucherCodeRefID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoucherCodeRefID", reflect.TypeOf((*MockVcRepository)(nil).UpdateVoucherCodeRefID), arg0, arg1, arg2)
}

// UpdateVoucherCodeRejected mocks base method.
func (m *MockVcRepository) UpdateVoucherCodeRejected(arg0 echo.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoucherCodeRejected", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoucherCodeRejected indicates an expected call of UpdateVoucherCodeRejected.
func (mr *MockVcRepositoryMockRecorder) UpdateVoucherCodeRejected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoucherCodeRejected", reflect.TypeOf((*MockVcRepository)(nil).UpdateVoucherCodeRejected), arg0, arg1)
}

// UpdateVoucherCodeSucceeded mocks base method.
func (m *MockVcRepository) UpdateVoucherCodeSucceeded(arg0 echo.Context, arg1 *models.RewardPayment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoucherCodeSucceeded", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoucherCodeSucceeded indicates an expected call of UpdateVoucherCodeSucceeded.
func (mr *MockVcRepositoryMockRecorder) UpdateVoucherCodeSucceeded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoucherCodeSucceeded", reflect.TypeOf((*MockVcRepository)(nil).UpdateVoucherCodeSucceeded), arg0, arg1)
}

// ValidateVoucherGive mocks base method.
func (m *MockVcRepository) ValidateVoucherGive(arg0 echo.Context, arg1 *models.PayloadVoucherBuy) (*models.VoucherCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVoucherGive", arg0, arg1)
	ret0, _ := ret[0].(*models.VoucherCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateVoucherGive indicates an expected call of ValidateVoucherGive.
func (mr *MockVcRepositoryMockRecorder) ValidateVoucherGive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVoucherGive", reflect.TypeOf((*MockVcRepository)(nil).ValidateVoucherGive), arg0, arg1)
}
