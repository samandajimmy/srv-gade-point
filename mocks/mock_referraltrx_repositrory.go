// Code generated by MockGen. DO NOT EDIT.
// Source: gade/srv-gade-point/referraltrxs (interfaces: RefTRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gade/srv-gade-point/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockRefTRepository is a mock of RefTRepository interface.
type MockRefTRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefTRepositoryMockRecorder
}

// MockRefTRepositoryMockRecorder is the mock recorder for MockRefTRepository.
type MockRefTRepositoryMockRecorder struct {
	mock *MockRefTRepository
}

// NewMockRefTRepository creates a new mock instance.
func NewMockRefTRepository(ctrl *gomock.Controller) *MockRefTRepository {
	mock := &MockRefTRepository{ctrl: ctrl}
	mock.recorder = &MockRefTRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefTRepository) EXPECT() *MockRefTRepositoryMockRecorder {
	return m.recorder
}

// RGetCountRefTrxByCIF mocks base method.
func (m *MockRefTRepository) RGetCountRefTrxByCIF(arg0 echo.Context, arg1, arg2, arg3 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetCountRefTrxByCIF", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RGetCountRefTrxByCIF indicates an expected call of RGetCountRefTrxByCIF.
func (mr *MockRefTRepositoryMockRecorder) RGetCountRefTrxByCIF(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetCountRefTrxByCIF", reflect.TypeOf((*MockRefTRepository)(nil).RGetCountRefTrxByCIF), arg0, arg1, arg2, arg3)
}

// RGetMilestone mocks base method.
func (m *MockRefTRepository) RGetMilestone(arg0 echo.Context, arg1 models.MilestonePayload) (*models.Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetMilestone", arg0, arg1)
	ret0, _ := ret[0].(*models.Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RGetMilestone indicates an expected call of RGetMilestone.
func (mr *MockRefTRepositoryMockRecorder) RGetMilestone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetMilestone", reflect.TypeOf((*MockRefTRepository)(nil).RGetMilestone), arg0, arg1)
}

// RGetRanking mocks base method.
func (m *MockRefTRepository) RGetRanking(arg0 echo.Context, arg1 models.RankingPayload) ([]*models.Ranking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetRanking", arg0, arg1)
	ret0, _ := ret[0].([]*models.Ranking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RGetRanking indicates an expected call of RGetRanking.
func (mr *MockRefTRepositoryMockRecorder) RGetRanking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetRanking", reflect.TypeOf((*MockRefTRepository)(nil).RGetRanking), arg0, arg1)
}

// RGetRankingByReferralCode mocks base method.
func (m *MockRefTRepository) RGetRankingByReferralCode(arg0 echo.Context, arg1 string) (*models.Ranking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetRankingByReferralCode", arg0, arg1)
	ret0, _ := ret[0].(*models.Ranking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RGetRankingByReferralCode indicates an expected call of RGetRankingByReferralCode.
func (mr *MockRefTRepositoryMockRecorder) RGetRankingByReferralCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetRankingByReferralCode", reflect.TypeOf((*MockRefTRepository)(nil).RGetRankingByReferralCode), arg0, arg1)
}

// RPostReferralTrx mocks base method.
func (m *MockRefTRepository) RPostReferralTrx(arg0 echo.Context, arg1 models.ReferralTrx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPostReferralTrx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RPostReferralTrx indicates an expected call of RPostReferralTrx.
func (mr *MockRefTRepositoryMockRecorder) RPostReferralTrx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPostReferralTrx", reflect.TypeOf((*MockRefTRepository)(nil).RPostReferralTrx), arg0, arg1)
}
