// Code generated by MockGen. DO NOT EDIT.
// Source: gade/srv-gade-point/referrals (interfaces: RestRefRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gade/srv-gade-point/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockRestRefRepository is a mock of RestRefRepository interface.
type MockRestRefRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRestRefRepositoryMockRecorder
}

// MockRestRefRepositoryMockRecorder is the mock recorder for MockRestRefRepository.
type MockRestRefRepositoryMockRecorder struct {
	mock *MockRestRefRepository
}

// NewMockRestRefRepository creates a new mock instance.
func NewMockRestRefRepository(ctrl *gomock.Controller) *MockRestRefRepository {
	mock := &MockRestRefRepository{ctrl: ctrl}
	mock.recorder = &MockRestRefRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestRefRepository) EXPECT() *MockRestRefRepositoryMockRecorder {
	return m.recorder
}

// RRGetOslStatus mocks base method.
func (m *MockRestRefRepository) RRGetOslStatus(arg0 echo.Context, arg1 models.ReqOslStatus) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RRGetOslStatus", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RRGetOslStatus indicates an expected call of RRGetOslStatus.
func (mr *MockRestRefRepositoryMockRecorder) RRGetOslStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RRGetOslStatus", reflect.TypeOf((*MockRestRefRepository)(nil).RRGetOslStatus), arg0, arg1)
}
