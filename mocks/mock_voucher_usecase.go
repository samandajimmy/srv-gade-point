// Code generated by MockGen. DO NOT EDIT.
// Source: gade/srv-gade-point/vouchers (interfaces: VUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gade/srv-gade-point/models"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockVUsecase is a mock of VUsecase interface.
type MockVUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockVUsecaseMockRecorder
}

// MockVUsecaseMockRecorder is the mock recorder for MockVUsecase.
type MockVUsecaseMockRecorder struct {
	mock *MockVUsecase
}

// NewMockVUsecase creates a new mock instance.
func NewMockVUsecase(ctrl *gomock.Controller) *MockVUsecase {
	mock := &MockVUsecase{ctrl: ctrl}
	mock.recorder = &MockVUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVUsecase) EXPECT() *MockVUsecaseMockRecorder {
	return m.recorder
}

// CreateVoucher mocks base method.
func (m *MockVUsecase) CreateVoucher(arg0 echo.Context, arg1 *models.Voucher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoucher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVoucher indicates an expected call of CreateVoucher.
func (mr *MockVUsecaseMockRecorder) CreateVoucher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoucher", reflect.TypeOf((*MockVUsecase)(nil).CreateVoucher), arg0, arg1)
}

// GetHistoryVouchersUser mocks base method.
func (m *MockVUsecase) GetHistoryVouchersUser(arg0 echo.Context) (models.ListVoucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryVouchersUser", arg0)
	ret0, _ := ret[0].(models.ListVoucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryVouchersUser indicates an expected call of GetHistoryVouchersUser.
func (mr *MockVUsecaseMockRecorder) GetHistoryVouchersUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryVouchersUser", reflect.TypeOf((*MockVUsecase)(nil).GetHistoryVouchersUser), arg0)
}

// GetVoucher mocks base method.
func (m *MockVUsecase) GetVoucher(arg0 echo.Context, arg1 string) (*models.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoucher", arg0, arg1)
	ret0, _ := ret[0].(*models.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoucher indicates an expected call of GetVoucher.
func (mr *MockVUsecaseMockRecorder) GetVoucher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoucher", reflect.TypeOf((*MockVUsecase)(nil).GetVoucher), arg0, arg1)
}

// GetVoucherAdmin mocks base method.
func (m *MockVUsecase) GetVoucherAdmin(arg0 echo.Context, arg1 string) (*models.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoucherAdmin", arg0, arg1)
	ret0, _ := ret[0].(*models.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoucherAdmin indicates an expected call of GetVoucherAdmin.
func (mr *MockVUsecaseMockRecorder) GetVoucherAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoucherAdmin", reflect.TypeOf((*MockVUsecase)(nil).GetVoucherAdmin), arg0, arg1)
}

// GetVoucherCode mocks base method.
func (m *MockVUsecase) GetVoucherCode(arg0 echo.Context, arg1 *models.PayloadValidator, arg2 bool) (*models.VoucherCode, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoucherCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.VoucherCode)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVoucherCode indicates an expected call of GetVoucherCode.
func (mr *MockVUsecaseMockRecorder) GetVoucherCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoucherCode", reflect.TypeOf((*MockVUsecase)(nil).GetVoucherCode), arg0, arg1, arg2)
}

// GetVouchers mocks base method.
func (m *MockVUsecase) GetVouchers(arg0 echo.Context) (models.ListVoucher, *models.ResponseErrors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVouchers", arg0)
	ret0, _ := ret[0].(models.ListVoucher)
	ret1, _ := ret[1].(*models.ResponseErrors)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVouchers indicates an expected call of GetVouchers.
func (mr *MockVUsecaseMockRecorder) GetVouchers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVouchers", reflect.TypeOf((*MockVUsecase)(nil).GetVouchers), arg0)
}

// GetVouchersAdmin mocks base method.
func (m *MockVUsecase) GetVouchersAdmin(arg0 echo.Context, arg1 map[string]interface{}) ([]*models.Voucher, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVouchersAdmin", arg0, arg1)
	ret0, _ := ret[0].([]*models.Voucher)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVouchersAdmin indicates an expected call of GetVouchersAdmin.
func (mr *MockVUsecaseMockRecorder) GetVouchersAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVouchersAdmin", reflect.TypeOf((*MockVUsecase)(nil).GetVouchersAdmin), arg0, arg1)
}

// GetVouchersUser mocks base method.
func (m *MockVUsecase) GetVouchersUser(arg0 echo.Context, arg1 map[string]interface{}) (models.ListVoucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVouchersUser", arg0, arg1)
	ret0, _ := ret[0].(models.ListVoucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVouchersUser indicates an expected call of GetVouchersUser.
func (mr *MockVUsecaseMockRecorder) GetVouchersUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVouchersUser", reflect.TypeOf((*MockVUsecase)(nil).GetVouchersUser), arg0, arg1)
}

// UpdateStatusBasedOnStartDate mocks base method.
func (m *MockVUsecase) UpdateStatusBasedOnStartDate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusBasedOnStartDate")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusBasedOnStartDate indicates an expected call of UpdateStatusBasedOnStartDate.
func (mr *MockVUsecaseMockRecorder) UpdateStatusBasedOnStartDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusBasedOnStartDate", reflect.TypeOf((*MockVUsecase)(nil).UpdateStatusBasedOnStartDate))
}

// UpdateVoucher mocks base method.
func (m *MockVUsecase) UpdateVoucher(arg0 echo.Context, arg1 int64, arg2 *models.UpdateVoucher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoucher", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoucher indicates an expected call of UpdateVoucher.
func (mr *MockVUsecaseMockRecorder) UpdateVoucher(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoucher", reflect.TypeOf((*MockVUsecase)(nil).UpdateVoucher), arg0, arg1, arg2)
}

// UploadVoucherImages mocks base method.
func (m *MockVUsecase) UploadVoucherImages(arg0 echo.Context, arg1 *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadVoucherImages", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadVoucherImages indicates an expected call of UploadVoucherImages.
func (mr *MockVUsecaseMockRecorder) UploadVoucherImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadVoucherImages", reflect.TypeOf((*MockVUsecase)(nil).UploadVoucherImages), arg0, arg1)
}

// VoucherBuy mocks base method.
func (m *MockVUsecase) VoucherBuy(arg0 echo.Context, arg1 *models.PayloadVoucherBuy) (*models.VoucherCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoucherBuy", arg0, arg1)
	ret0, _ := ret[0].(*models.VoucherCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoucherBuy indicates an expected call of VoucherBuy.
func (mr *MockVUsecaseMockRecorder) VoucherBuy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoucherBuy", reflect.TypeOf((*MockVUsecase)(nil).VoucherBuy), arg0, arg1)
}

// VoucherGive mocks base method.
func (m *MockVUsecase) VoucherGive(arg0 echo.Context, arg1 *models.PayloadVoucherBuy) (*models.VoucherCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoucherGive", arg0, arg1)
	ret0, _ := ret[0].(*models.VoucherCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoucherGive indicates an expected call of VoucherGive.
func (mr *MockVUsecaseMockRecorder) VoucherGive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoucherGive", reflect.TypeOf((*MockVUsecase)(nil).VoucherGive), arg0, arg1)
}

// VoucherRedeem mocks base method.
func (m *MockVUsecase) VoucherRedeem(arg0 echo.Context, arg1 *models.PayloadValidator) (*models.VoucherCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoucherRedeem", arg0, arg1)
	ret0, _ := ret[0].(*models.VoucherCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoucherRedeem indicates an expected call of VoucherRedeem.
func (mr *MockVUsecaseMockRecorder) VoucherRedeem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoucherRedeem", reflect.TypeOf((*MockVUsecase)(nil).VoucherRedeem), arg0, arg1)
}

// VoucherValidate mocks base method.
func (m *MockVUsecase) VoucherValidate(arg0 echo.Context, arg1 *models.PayloadValidator, arg2 *models.VoucherCode) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoucherValidate", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoucherValidate indicates an expected call of VoucherValidate.
func (mr *MockVUsecaseMockRecorder) VoucherValidate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoucherValidate", reflect.TypeOf((*MockVUsecase)(nil).VoucherValidate), arg0, arg1, arg2)
}
