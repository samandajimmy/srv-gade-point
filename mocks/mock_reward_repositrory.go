// Code generated by MockGen. DO NOT EDIT.
// Source: gade/srv-gade-point/rewards (interfaces: RRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gade/srv-gade-point/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockRRepository is a mock of RRepository interface.
type MockRRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRRepositoryMockRecorder
}

// MockRRepositoryMockRecorder is the mock recorder for MockRRepository.
type MockRRepositoryMockRecorder struct {
	mock *MockRRepository
}

// NewMockRRepository creates a new mock instance.
func NewMockRRepository(ctrl *gomock.Controller) *MockRRepository {
	mock := &MockRRepository{ctrl: ctrl}
	mock.recorder = &MockRRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRRepository) EXPECT() *MockRRepositoryMockRecorder {
	return m.recorder
}

// CountRewards mocks base method.
func (m *MockRRepository) CountRewards(arg0 echo.Context, arg1 *models.RewardsPayload) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRewards", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRewards indicates an expected call of CountRewards.
func (mr *MockRRepositoryMockRecorder) CountRewards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRewards", reflect.TypeOf((*MockRRepository)(nil).CountRewards), arg0, arg1)
}

// CreateReward mocks base method.
func (m *MockRRepository) CreateReward(arg0 echo.Context, arg1 *models.Reward, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReward", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReward indicates an expected call of CreateReward.
func (mr *MockRRepositoryMockRecorder) CreateReward(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReward", reflect.TypeOf((*MockRRepository)(nil).CreateReward), arg0, arg1, arg2)
}

// CreateRewardTag mocks base method.
func (m *MockRRepository) CreateRewardTag(arg0 echo.Context, arg1 *models.Tag, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRewardTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRewardTag indicates an expected call of CreateRewardTag.
func (mr *MockRRepositoryMockRecorder) CreateRewardTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRewardTag", reflect.TypeOf((*MockRRepository)(nil).CreateRewardTag), arg0, arg1, arg2)
}

// DeleteByCampaign mocks base method.
func (m *MockRRepository) DeleteByCampaign(arg0 echo.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByCampaign", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByCampaign indicates an expected call of DeleteByCampaign.
func (mr *MockRRepositoryMockRecorder) DeleteByCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByCampaign", reflect.TypeOf((*MockRRepository)(nil).DeleteByCampaign), arg0, arg1)
}

// DeleteRewardTag mocks base method.
func (m *MockRRepository) DeleteRewardTag(arg0 echo.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRewardTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRewardTag indicates an expected call of DeleteRewardTag.
func (mr *MockRRepositoryMockRecorder) DeleteRewardTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRewardTag", reflect.TypeOf((*MockRRepository)(nil).DeleteRewardTag), arg0, arg1)
}

// GetRewardByCampaign mocks base method.
func (m *MockRRepository) GetRewardByCampaign(arg0 echo.Context, arg1 int64) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardByCampaign", arg0, arg1)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardByCampaign indicates an expected call of GetRewardByCampaign.
func (mr *MockRRepositoryMockRecorder) GetRewardByCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardByCampaign", reflect.TypeOf((*MockRRepository)(nil).GetRewardByCampaign), arg0, arg1)
}

// GetRewardPromotions mocks base method.
func (m *MockRRepository) GetRewardPromotions(arg0 echo.Context, arg1 models.RewardPromotionLists) ([]*models.RewardPromotions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardPromotions", arg0, arg1)
	ret0, _ := ret[0].([]*models.RewardPromotions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardPromotions indicates an expected call of GetRewardPromotions.
func (mr *MockRRepositoryMockRecorder) GetRewardPromotions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardPromotions", reflect.TypeOf((*MockRRepository)(nil).GetRewardPromotions), arg0, arg1)
}

// GetRewardTags mocks base method.
func (m *MockRRepository) GetRewardTags(arg0 echo.Context, arg1 *models.Reward) (*models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardTags", arg0, arg1)
	ret0, _ := ret[0].(*models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardTags indicates an expected call of GetRewardTags.
func (mr *MockRRepositoryMockRecorder) GetRewardTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardTags", reflect.TypeOf((*MockRRepository)(nil).GetRewardTags), arg0, arg1)
}

// GetRewards mocks base method.
func (m *MockRRepository) GetRewards(arg0 echo.Context, arg1 *models.RewardsPayload) ([]models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewards", arg0, arg1)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewards indicates an expected call of GetRewards.
func (mr *MockRRepositoryMockRecorder) GetRewards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewards", reflect.TypeOf((*MockRRepository)(nil).GetRewards), arg0, arg1)
}

// RGetRandomId mocks base method.
func (m *MockRRepository) RGetRandomId(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetRandomId", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// RGetRandomId indicates an expected call of RGetRandomId.
func (mr *MockRRepositoryMockRecorder) RGetRandomId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetRandomId", reflect.TypeOf((*MockRRepository)(nil).RGetRandomId), arg0)
}

// RGetReferralValidator mocks base method.
func (m *MockRRepository) RGetReferralValidator(arg0 echo.Context, arg1 int64) (models.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetReferralValidator", arg0, arg1)
	ret0, _ := ret[0].(models.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RGetReferralValidator indicates an expected call of RGetReferralValidator.
func (mr *MockRRepositoryMockRecorder) RGetReferralValidator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetReferralValidator", reflect.TypeOf((*MockRRepository)(nil).RGetReferralValidator), arg0, arg1)
}
