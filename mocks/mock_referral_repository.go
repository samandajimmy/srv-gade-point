// Code generated by MockGen. DO NOT EDIT.
// Source: gade/srv-gade-point/referrals (interfaces: RefRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gade/srv-gade-point/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockRefRepository is a mock of RefRepository interface.
type MockRefRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefRepositoryMockRecorder
}

// MockRefRepositoryMockRecorder is the mock recorder for MockRefRepository.
type MockRefRepositoryMockRecorder struct {
	mock *MockRefRepository
}

// NewMockRefRepository creates a new mock instance.
func NewMockRefRepository(ctrl *gomock.Controller) *MockRefRepository {
	mock := &MockRefRepository{ctrl: ctrl}
	mock.recorder = &MockRefRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefRepository) EXPECT() *MockRefRepositoryMockRecorder {
	return m.recorder
}

// CreateReferral mocks base method.
func (m *MockRefRepository) CreateReferral(arg0 echo.Context, arg1 models.ReferralCodes) (models.ReferralCodes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferral", arg0, arg1)
	ret0, _ := ret[0].(models.ReferralCodes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReferral indicates an expected call of CreateReferral.
func (mr *MockRefRepositoryMockRecorder) CreateReferral(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferral", reflect.TypeOf((*MockRefRepository)(nil).CreateReferral), arg0, arg1)
}

// GetCampaignId mocks base method.
func (m *MockRefRepository) GetCampaignId(arg0 echo.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignId indicates an expected call of GetCampaignId.
func (mr *MockRefRepositoryMockRecorder) GetCampaignId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignId", reflect.TypeOf((*MockRefRepository)(nil).GetCampaignId), arg0, arg1)
}

// GetReferralByCif mocks base method.
func (m *MockRefRepository) GetReferralByCif(arg0 echo.Context, arg1 string) (models.ReferralCodes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralByCif", arg0, arg1)
	ret0, _ := ret[0].(models.ReferralCodes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralByCif indicates an expected call of GetReferralByCif.
func (mr *MockRefRepositoryMockRecorder) GetReferralByCif(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralByCif", reflect.TypeOf((*MockRefRepository)(nil).GetReferralByCif), arg0, arg1)
}

// RGetRefCampaignReward mocks base method.
func (m *MockRefRepository) RGetRefCampaignReward(arg0 echo.Context, arg1 models.RefCampaignReward) (models.RefCampaignReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetRefCampaignReward", arg0, arg1)
	ret0, _ := ret[0].(models.RefCampaignReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RGetRefCampaignReward indicates an expected call of RGetRefCampaignReward.
func (mr *MockRefRepositoryMockRecorder) RGetRefCampaignReward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetRefCampaignReward", reflect.TypeOf((*MockRefRepository)(nil).RGetRefCampaignReward), arg0, arg1)
}

// RPostCoreTrx mocks base method.
func (m *MockRefRepository) RPostCoreTrx(arg0 echo.Context, arg1 []models.CoreTrxPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPostCoreTrx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RPostCoreTrx indicates an expected call of RPostCoreTrx.
func (mr *MockRefRepositoryMockRecorder) RPostCoreTrx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPostCoreTrx", reflect.TypeOf((*MockRefRepository)(nil).RPostCoreTrx), arg0, arg1)
}

// RSumRefIncentive mocks base method.
func (m *MockRefRepository) RSumRefIncentive(arg0 echo.Context, arg1 string, arg2 models.Reward) (models.SumIncentive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSumRefIncentive", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.SumIncentive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RSumRefIncentive indicates an expected call of RSumRefIncentive.
func (mr *MockRefRepositoryMockRecorder) RSumRefIncentive(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSumRefIncentive", reflect.TypeOf((*MockRefRepository)(nil).RSumRefIncentive), arg0, arg1, arg2)
}
