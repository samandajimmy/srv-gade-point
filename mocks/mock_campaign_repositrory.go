// Code generated by MockGen. DO NOT EDIT.
// Source: gade/srv-gade-point/campaigns (interfaces: CRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gade/srv-gade-point/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockCRepository is a mock of CRepository interface.
type MockCRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCRepositoryMockRecorder
}

// MockCRepositoryMockRecorder is the mock recorder for MockCRepository.
type MockCRepositoryMockRecorder struct {
	mock *MockCRepository
}

// NewMockCRepository creates a new mock instance.
func NewMockCRepository(ctrl *gomock.Controller) *MockCRepository {
	mock := &MockCRepository{ctrl: ctrl}
	mock.recorder = &MockCRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCRepository) EXPECT() *MockCRepositoryMockRecorder {
	return m.recorder
}

// CountCampaign mocks base method.
func (m *MockCRepository) CountCampaign(arg0 echo.Context, arg1 map[string]interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCampaign", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCampaign indicates an expected call of CountCampaign.
func (mr *MockCRepositoryMockRecorder) CountCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCampaign", reflect.TypeOf((*MockCRepository)(nil).CountCampaign), arg0, arg1)
}

// CreateCampaign mocks base method.
func (m *MockCRepository) CreateCampaign(arg0 echo.Context, arg1 *models.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockCRepositoryMockRecorder) CreateCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockCRepository)(nil).CreateCampaign), arg0, arg1)
}

// Delete mocks base method.
func (m *MockCRepository) Delete(arg0 echo.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCRepository)(nil).Delete), arg0, arg1)
}

// GetCampaign mocks base method.
func (m *MockCRepository) GetCampaign(arg0 echo.Context, arg1 map[string]interface{}) ([]*models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaign", arg0, arg1)
	ret0, _ := ret[0].([]*models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaign indicates an expected call of GetCampaign.
func (mr *MockCRepositoryMockRecorder) GetCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaign", reflect.TypeOf((*MockCRepository)(nil).GetCampaign), arg0, arg1)
}

// GetCampaignAvailable mocks base method.
func (m *MockCRepository) GetCampaignAvailable(arg0 echo.Context, arg1 models.PayloadValidator) ([]*models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignAvailable", arg0, arg1)
	ret0, _ := ret[0].([]*models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignAvailable indicates an expected call of GetCampaignAvailable.
func (mr *MockCRepositoryMockRecorder) GetCampaignAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignAvailable", reflect.TypeOf((*MockCRepository)(nil).GetCampaignAvailable), arg0, arg1)
}

// GetCampaignDetail mocks base method.
func (m *MockCRepository) GetCampaignDetail(arg0 echo.Context, arg1 int64) (*models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignDetail", arg0, arg1)
	ret0, _ := ret[0].(*models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignDetail indicates an expected call of GetCampaignDetail.
func (mr *MockCRepositoryMockRecorder) GetCampaignDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignDetail", reflect.TypeOf((*MockCRepository)(nil).GetCampaignDetail), arg0, arg1)
}

// GetReferralCampaign mocks base method.
func (m *MockCRepository) GetReferralCampaign(arg0 echo.Context, arg1 models.PayloadValidator) *[]*models.Campaign {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralCampaign", arg0, arg1)
	ret0, _ := ret[0].(*[]*models.Campaign)
	return ret0
}

// GetReferralCampaign indicates an expected call of GetReferralCampaign.
func (mr *MockCRepositoryMockRecorder) GetReferralCampaign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralCampaign", reflect.TypeOf((*MockCRepository)(nil).GetReferralCampaign), arg0, arg1)
}

// SavePoint mocks base method.
func (m *MockCRepository) SavePoint(arg0 echo.Context, arg1 *models.CampaignTrx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePoint indicates an expected call of SavePoint.
func (mr *MockCRepositoryMockRecorder) SavePoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoint", reflect.TypeOf((*MockCRepository)(nil).SavePoint), arg0, arg1)
}

// UpdateCampaign mocks base method.
func (m *MockCRepository) UpdateCampaign(arg0 echo.Context, arg1 int64, arg2 *models.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaign", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCampaign indicates an expected call of UpdateCampaign.
func (mr *MockCRepositoryMockRecorder) UpdateCampaign(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaign", reflect.TypeOf((*MockCRepository)(nil).UpdateCampaign), arg0, arg1, arg2)
}

// UpdateExpiryDate mocks base method.
func (m *MockCRepository) UpdateExpiryDate(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpiryDate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpiryDate indicates an expected call of UpdateExpiryDate.
func (mr *MockCRepositoryMockRecorder) UpdateExpiryDate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpiryDate", reflect.TypeOf((*MockCRepository)(nil).UpdateExpiryDate), arg0)
}

// UpdateStatusBasedOnStartDate mocks base method.
func (m *MockCRepository) UpdateStatusBasedOnStartDate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusBasedOnStartDate")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusBasedOnStartDate indicates an expected call of UpdateStatusBasedOnStartDate.
func (mr *MockCRepositoryMockRecorder) UpdateStatusBasedOnStartDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusBasedOnStartDate", reflect.TypeOf((*MockCRepository)(nil).UpdateStatusBasedOnStartDate))
}
