// Code generated by MockGen. DO NOT EDIT.
// Source: gade/srv-gade-point/quotas (interfaces: QUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gade/srv-gade-point/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockQUseCase is a mock of QUseCase interface.
type MockQUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockQUseCaseMockRecorder
}

// MockQUseCaseMockRecorder is the mock recorder for MockQUseCase.
type MockQUseCaseMockRecorder struct {
	mock *MockQUseCase
}

// NewMockQUseCase creates a new mock instance.
func NewMockQUseCase(ctrl *gomock.Controller) *MockQUseCase {
	mock := &MockQUseCase{ctrl: ctrl}
	mock.recorder = &MockQUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQUseCase) EXPECT() *MockQUseCaseMockRecorder {
	return m.recorder
}

// CheckQuota mocks base method.
func (m *MockQUseCase) CheckQuota(arg0 echo.Context, arg1 models.Reward, arg2 *models.PayloadValidator) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQuota", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckQuota indicates an expected call of CheckQuota.
func (mr *MockQUseCaseMockRecorder) CheckQuota(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQuota", reflect.TypeOf((*MockQUseCase)(nil).CheckQuota), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockQUseCase) Create(arg0 echo.Context, arg1 *models.Quota, arg2 *models.Reward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockQUseCaseMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQUseCase)(nil).Create), arg0, arg1, arg2)
}

// DeleteByReward mocks base method.
func (m *MockQUseCase) DeleteByReward(arg0 echo.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByReward", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByReward indicates an expected call of DeleteByReward.
func (mr *MockQUseCaseMockRecorder) DeleteByReward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByReward", reflect.TypeOf((*MockQUseCase)(nil).DeleteByReward), arg0, arg1)
}

// UpdateAddQuota mocks base method.
func (m *MockQUseCase) UpdateAddQuota(arg0 echo.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddQuota", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddQuota indicates an expected call of UpdateAddQuota.
func (mr *MockQUseCaseMockRecorder) UpdateAddQuota(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddQuota", reflect.TypeOf((*MockQUseCase)(nil).UpdateAddQuota), arg0, arg1)
}

// UpdateReduceQuota mocks base method.
func (m *MockQUseCase) UpdateReduceQuota(arg0 echo.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReduceQuota", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReduceQuota indicates an expected call of UpdateReduceQuota.
func (mr *MockQUseCaseMockRecorder) UpdateReduceQuota(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReduceQuota", reflect.TypeOf((*MockQUseCase)(nil).UpdateReduceQuota), arg0, arg1)
}
